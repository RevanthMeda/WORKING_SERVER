"""Initial migration with existing schema

Revision ID: 859ab805d323
Revises: 
Create Date: 2025-10-10 13:42:37.775067

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Text

# revision identifiers, used by Alembic.
revision = '859ab805d323'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.String(length=50), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.String(length=100), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('checksum', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_audit_event_type', ['event_type'], unique=False)
        batch_op.create_index('idx_audit_resource', ['resource_type', 'resource_id'], unique=False)
        batch_op.create_index('idx_audit_severity', ['severity'], unique=False)
        batch_op.create_index('idx_audit_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_audit_user_id', ['user_id'], unique=False)

    op.create_table('api_keys',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('key_hash', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_table('api_usage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('api_key_id', sa.String(length=36), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('endpoint', sa.String(length=200), nullable=False),
    sa.Column('method', sa.String(length=10), nullable=False),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('response_time', sa.Float(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('api_usage', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_api_usage_timestamp'), ['timestamp'], unique=False)

    with op.batch_alter_table('fat_reports', schema=None) as batch_op:
        batch_op.add_column(sa.Column('test_location', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('test_equipment', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('acceptance_criteria', sa.Text(), nullable=True))

    with op.batch_alter_table('fds_reports', schema=None) as batch_op:
        batch_op.add_column(sa.Column('functional_requirements', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('process_description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('control_philosophy', sa.Text(), nullable=True))

    with op.batch_alter_table('hds_reports', schema=None) as batch_op:
        batch_op.add_column(sa.Column('system_description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('hardware_components', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('network_architecture', sa.Text(), nullable=True))

    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_notifications_created_at'))
        batch_op.drop_index(batch_op.f('idx_notifications_user_read'))

    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.alter_column('submitted_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('approved_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('edit_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_reports_created_at'))
        batch_op.drop_index(batch_op.f('idx_reports_status'))
        batch_op.drop_index(batch_op.f('idx_reports_status_user'))
        batch_op.drop_index(batch_op.f('idx_reports_type'))
        batch_op.drop_index(batch_op.f('idx_reports_type_status'))
        batch_op.drop_index(batch_op.f('idx_reports_user_email'))
        batch_op.drop_index(batch_op.f('idx_reports_user_status'))

    with op.batch_alter_table('sat_reports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_sat_reports_report_id'))

    with op.batch_alter_table('site_survey_reports', schema=None) as batch_op:
        batch_op.add_column(sa.Column('site_name', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('site_location', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('site_access_details', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('area_engineer', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('site_caretaker', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('survey_completed_by', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('plc_details', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('hmi_details', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('router_details', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('network_equipment', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('network_configuration', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('mobile_signal_strength', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('local_scada_details', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('verification_checklist', sa.Text(), nullable=True))

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=30),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_users_role'))
        batch_op.drop_index(batch_op.f('idx_users_role_status'))
        batch_op.drop_index(batch_op.f('idx_users_status'))
        batch_op.drop_index(batch_op.f('idx_users_status_role'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_users_status_role'), ['status', 'role'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_role_status'), ['role', 'status'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_role'), ['role'], unique=False)
        batch_op.alter_column('role',
               existing_type=sa.String(length=30),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)

    with op.batch_alter_table('site_survey_reports', schema=None) as batch_op:
        batch_op.drop_column('verification_checklist')
        batch_op.drop_column('local_scada_details')
        batch_op.drop_column('mobile_signal_strength')
        batch_op.drop_column('network_configuration')
        batch_op.drop_column('network_equipment')
        batch_op.drop_column('router_details')
        batch_op.drop_column('hmi_details')
        batch_op.drop_column('plc_details')
        batch_op.drop_column('survey_completed_by')
        batch_op.drop_column('site_caretaker')
        batch_op.drop_column('area_engineer')
        batch_op.drop_column('site_access_details')
        batch_op.drop_column('site_location')
        batch_op.drop_column('site_name')

    with op.batch_alter_table('sat_reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_sat_reports_report_id'), ['report_id'], unique=False)

    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_reports_user_status'), ['user_email', 'status'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_user_email'), ['user_email'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_type_status'), ['type', 'status'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_type'), ['type'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_status_user'), ['status', 'user_email'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_reports_created_at'), ['created_at'], unique=False)
        batch_op.alter_column('edit_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
        batch_op.alter_column('approved_at',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
        batch_op.alter_column('submitted_at',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)

    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_notifications_user_read'), ['user_email', 'read'], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_created_at'), ['created_at'], unique=False)

    with op.batch_alter_table('hds_reports', schema=None) as batch_op:
        batch_op.drop_column('network_architecture')
        batch_op.drop_column('hardware_components')
        batch_op.drop_column('system_description')

    with op.batch_alter_table('fds_reports', schema=None) as batch_op:
        batch_op.drop_column('control_philosophy')
        batch_op.drop_column('process_description')
        batch_op.drop_column('functional_requirements')

    with op.batch_alter_table('fat_reports', schema=None) as batch_op:
        batch_op.drop_column('acceptance_criteria')
        batch_op.drop_column('test_equipment')
        batch_op.drop_column('test_location')

    with op.batch_alter_table('api_usage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_api_usage_timestamp'))

    op.drop_table('api_usage')
    op.drop_table('api_keys')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_audit_user_id')
        batch_op.drop_index('idx_audit_timestamp')
        batch_op.drop_index('idx_audit_severity')
        batch_op.drop_index('idx_audit_resource')
        batch_op.drop_index('idx_audit_event_type')

    op.drop_table('audit_logs')
    # ### end Alembic commands ###
