# Code Quality Automation Configuration

# Quality gates - minimum standards that must be met
quality_gates:
  min_coverage: 80.0              # Minimum test coverage percentage
  min_pylint_score: 8.0           # Minimum Pylint score (0-10)
  max_complexity: 10              # Maximum average cyclomatic complexity
  max_security_issues: 0          # Maximum number of security issues
  max_type_errors: 5              # Maximum number of type checking errors
  min_overall_score: 70.0         # Minimum overall quality score

# Monitoring configuration
monitoring:
  enabled: true                   # Enable continuous monitoring
  interval_hours: 24              # How often to run quality checks
  alert_threshold: 60.0           # Score below which to send alerts

# Reporting configuration
reporting:
  generate_dashboard: true        # Generate HTML dashboard
  send_notifications: false       # Send email/Slack notifications
  notification_email: ""          # Email address for notifications
  slack_webhook: ""               # Slack webhook URL for notifications

# Automation configuration
automation:
  auto_fix_formatting: true       # Automatically fix formatting issues
  auto_create_issues: false       # Create GitHub issues for quality problems
  auto_update_docs: true          # Update documentation automatically

# Tool-specific configuration
tools:
  black:
    line_length: 127
    target_version: ["py39"]
    
  isort:
    profile: "black"
    line_length: 127
    
  flake8:
    max_line_length: 127
    max_complexity: 10
    ignore: ["E203", "W503"]
    
  pylint:
    min_score: 8.0
    disable: ["missing-docstring", "too-few-public-methods"]
    
  mypy:
    ignore_missing_imports: true
    no_strict_optional: true
    
  bandit:
    exclude_dirs: ["tests", "migrations"]
    skip_tests: ["B101", "B601"]
    
  radon:
    min_complexity_grade: "B"
    exclude: ["tests", "migrations", "venv", "env"]

# Technical debt configuration
technical_debt:
  priority_weights:
    FIXME: 3
    HACK: 3
    XXX: 3
    HIGH_COMPLEXITY: 2
    LOW_MAINTAINABILITY: 3
    TODO: 1
    DEPRECATED: 2
    POTENTIAL_DUPLICATION: 1
    LARGE_FILE: 2
  
  thresholds:
    high_complexity: 10           # Functions with complexity > this are flagged
    low_maintainability: 20       # Files with MI < this are flagged
    large_file_lines: 500         # Files with > this many lines are flagged
    
  effort_estimation:
    small: "1-2 hours"
    medium: "1-2 days"
    large: "1+ weeks"

# Dashboard configuration
dashboard:
  title: "SAT Report Generator - Quality Dashboard"
  refresh_interval: 3600          # Auto-refresh interval in seconds
  chart_style: "seaborn"          # Chart styling
  show_trends: true               # Show trend charts
  max_debt_items: 20              # Maximum debt items to show

# CI/CD integration
ci_cd:
  fail_on_quality_gate: true      # Fail CI/CD if quality gates not met
  generate_artifacts: true        # Generate quality report artifacts
  upload_coverage: true           # Upload coverage to external service
  
# File patterns to include/exclude
file_patterns:
  include:
    - "*.py"
  exclude:
    - "migrations/*"
    - "venv/*"
    - "env/*"
    - "__pycache__/*"
    - "build/*"
    - "dist/*"
    - ".git/*"
    - "node_modules/*"

# Custom quality rules
custom_rules:
  # Add custom quality rules here
  max_function_length: 50         # Maximum lines per function
  max_class_length: 500           # Maximum lines per class
  require_docstrings: false       # Require docstrings for all functions
  enforce_type_hints: false       # Require type hints for all functions